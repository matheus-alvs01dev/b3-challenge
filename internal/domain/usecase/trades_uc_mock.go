// Code generated by MockGen. DO NOT EDIT.
// Source: trades_uc.go
//
// Generated by this command:
//
//	mockgen -source=trades_uc.go -destination=trades_uc_mock.go -package=usecase TradesRepository
//

// Package usecase is a generated GoMock package.
package usecase

import (
	entity "b3challenge/internal/domain/entity"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTradesRepository is a mock of TradesRepository interface.
type MockTradesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTradesRepositoryMockRecorder
	isgomock struct{}
}

// MockTradesRepositoryMockRecorder is the mock recorder for MockTradesRepository.
type MockTradesRepositoryMockRecorder struct {
	mock *MockTradesRepository
}

// NewMockTradesRepository creates a new mock instance.
func NewMockTradesRepository(ctrl *gomock.Controller) *MockTradesRepository {
	mock := &MockTradesRepository{ctrl: ctrl}
	mock.recorder = &MockTradesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradesRepository) EXPECT() *MockTradesRepositoryMockRecorder {
	return m.recorder
}

// CreateTrades mocks base method.
func (m *MockTradesRepository) CreateTrades(ctx context.Context, trades []entity.Trade) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrades", ctx, trades)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrades indicates an expected call of CreateTrades.
func (mr *MockTradesRepositoryMockRecorder) CreateTrades(ctx, trades any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrades", reflect.TypeOf((*MockTradesRepository)(nil).CreateTrades), ctx, trades)
}

// ListTradeInfoByTickerAndDate mocks base method.
func (m *MockTradesRepository) ListTradeInfoByTickerAndDate(ctx context.Context, ticker string, date *time.Time) ([]entity.TradeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTradeInfoByTickerAndDate", ctx, ticker, date)
	ret0, _ := ret[0].([]entity.TradeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTradeInfoByTickerAndDate indicates an expected call of ListTradeInfoByTickerAndDate.
func (mr *MockTradesRepositoryMockRecorder) ListTradeInfoByTickerAndDate(ctx, ticker, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTradeInfoByTickerAndDate", reflect.TypeOf((*MockTradesRepository)(nil).ListTradeInfoByTickerAndDate), ctx, ticker, date)
}
