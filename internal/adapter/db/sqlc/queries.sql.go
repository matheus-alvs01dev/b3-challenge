// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateTradesParams struct {
	Hour     string
	Date     pgtype.Date
	Ticker   string
	Price    pgtype.Numeric
	Quantity int32
}

const listTradeInfoByTickerAndDate = `-- name: ListTradeInfoByTickerAndDate :many
SELECT
    date,
    price,
    quantity
FROM trades
WHERE ticker = $1
  AND ($2::date IS NULL OR date = $2::date)
`

type ListTradeInfoByTickerAndDateParams struct {
	Ticker    string
	TradeDate pgtype.Date
}

type ListTradeInfoByTickerAndDateRow struct {
	Date     pgtype.Date
	Price    pgtype.Numeric
	Quantity int32
}

func (q *Queries) ListTradeInfoByTickerAndDate(ctx context.Context, arg ListTradeInfoByTickerAndDateParams) ([]ListTradeInfoByTickerAndDateRow, error) {
	rows, err := q.db.Query(ctx, listTradeInfoByTickerAndDate, arg.Ticker, arg.TradeDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTradeInfoByTickerAndDateRow
	for rows.Next() {
		var i ListTradeInfoByTickerAndDateRow
		if err := rows.Scan(&i.Date, &i.Price, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
