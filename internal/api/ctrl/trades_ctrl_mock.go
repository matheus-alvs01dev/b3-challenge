// Code generated by MockGen. DO NOT EDIT.
// Source: trades_ctrl.go
//
// Generated by this command:
//
//	mockgen -source=trades_ctrl.go -destination=trades_ctrl_mock.go -package=ctrl TradesUC
//

// Package ctrl is a generated GoMock package.
package ctrl

import (
	context "context"
	reflect "reflect"
	time "time"

	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockTradesUC is a mock of TradesUC interface.
type MockTradesUC struct {
	ctrl     *gomock.Controller
	recorder *MockTradesUCMockRecorder
	isgomock struct{}
}

// MockTradesUCMockRecorder is the mock recorder for MockTradesUC.
type MockTradesUCMockRecorder struct {
	mock *MockTradesUC
}

// NewMockTradesUC creates a new mock instance.
func NewMockTradesUC(ctrl *gomock.Controller) *MockTradesUC {
	mock := &MockTradesUC{ctrl: ctrl}
	mock.recorder = &MockTradesUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradesUC) EXPECT() *MockTradesUCMockRecorder {
	return m.recorder
}

// ComputeTickerMetrics mocks base method.
func (m *MockTradesUC) ComputeTickerMetrics(ctx context.Context, ticker string, date *time.Time) (decimal.Decimal, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeTickerMetrics", ctx, ticker, date)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ComputeTickerMetrics indicates an expected call of ComputeTickerMetrics.
func (mr *MockTradesUCMockRecorder) ComputeTickerMetrics(ctx, ticker, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeTickerMetrics", reflect.TypeOf((*MockTradesUC)(nil).ComputeTickerMetrics), ctx, ticker, date)
}
